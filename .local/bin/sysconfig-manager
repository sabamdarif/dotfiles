#!/usr/bin/env bash

set -euo pipefail

VERSION="2.0"
CONFIG_DIR="${HOME}/.config/sysconfig"
PACKAGES_CONFIG="${CONFIG_DIR}/packages.conf"
FLATPAKS_CONFIG="${CONFIG_DIR}/flatpaks.conf"
EXTENSIONS_CONFIG="${CONFIG_DIR}/gnome-extensions.conf"
REPOS_CONFIG="${CONFIG_DIR}/repos.conf"
SERVICES_CONFIG="${CONFIG_DIR}/services.conf"
FIREWALL_CONFIG="${CONFIG_DIR}/firewall.conf"
PYTHON_CONFIG="${CONFIG_DIR}/python-packages.conf"
NODE_CONFIG="${CONFIG_DIR}/node-packages.conf"
CARGO_CONFIG="${CONFIG_DIR}/cargo-packages.conf"
GROUPS_CONFIG="${CONFIG_DIR}/groups.conf"
CONTAINERS_CONFIG="${CONFIG_DIR}/containers.conf"
CUSTOM_COMMANDS_CONFIG="${CONFIG_DIR}/custom-commands.sh"
DCONF_BACKUP="${CONFIG_DIR}/dconf-settings.ini"

detect_distro() {
    if [ -f /etc/os-release ]; then
        # shellcheck source=/dev/null
        . /etc/os-release
        echo "$ID"
    else
        echo "unknown"
    fi
}

DISTRO=$(detect_distro)

get_package_manager() {
    case "$DISTRO" in
    fedora)
        echo "dnf"
        ;;
    ubuntu | debian)
        echo "apt"
        ;;
    *)
        echo "unknown"
        ;;
    esac
}

PKG_MANAGER=$(get_package_manager)

detect_desktop() {
    if [ -n "${XDG_CURRENT_DESKTOP:-}" ]; then
        echo "$XDG_CURRENT_DESKTOP" | tr '[:upper:]' '[:lower:]'
    elif command -v gnome-shell &>/dev/null; then
        echo "gnome"
    else
        echo "unknown"
    fi
}

DESKTOP=$(detect_desktop)

init_config() {
    mkdir -p "$CONFIG_DIR"

    [ ! -f "$PACKAGES_CONFIG" ] && cat >"$PACKAGES_CONFIG" <<'EOF'
# System packages to install (one per line)
# Lines starting with # are comments
# Example:
# vim
# git
# htop

EOF

    [ ! -f "$FLATPAKS_CONFIG" ] && cat >"$FLATPAKS_CONFIG" <<'EOF'
# Flatpak applications to install (one per line)
# Use full application ID
# Example:
# org.mozilla.firefox
# com.spotify.Client

EOF

    [ ! -f "$EXTENSIONS_CONFIG" ] && cat >"$EXTENSIONS_CONFIG" <<'EOF'
# GNOME extensions to install (UUID@domain format)
# Example:
# dash-to-dock@micxgx.gmail.com
# appindicatorsupport@rgcjonas.gmail.com

EOF

    [ ! -f "$REPOS_CONFIG" ] && cat >"$REPOS_CONFIG" <<'EOF'
# Repositories configuration
# Format: TYPE:REPO_IDENTIFIER
# 
# For Fedora Copr repos use:
#   copr:USER/PROJECT
# 
# For Fedora third-party repos use:
#   fedora-third-party:REPO_NAME
#
# For RPM Fusion (Fedora):
#   rpmfusion:free
#   rpmfusion:nonfree
#
# Examples:
# copr:phracek/PyCharm
# rpmfusion:free
# rpmfusion:nonfree

EOF

    [ ! -f "$SERVICES_CONFIG" ] && cat >"$SERVICES_CONFIG" <<'EOF'
# Systemd services configuration
# Format: SERVICE_NAME:TYPE:STATE
# TYPE: system or user
# STATE: enabled or disabled
#
# Examples:
# docker.service:system:enabled
# sshd.service:system:enabled
# ssh-agent.service:user:enabled
# bluetooth.service:system:disabled

EOF

    [ ! -f "$FIREWALL_CONFIG" ] && cat >"$FIREWALL_CONFIG" <<'EOF'
# Firewall configuration
# Format depends on firewall type
#
# For firewalld (Fedora):
#   service:SERVICE_NAME
#   port:PORT/PROTOCOL
#   zone:ZONE_NAME
#
# For ufw (Ubuntu/Debian):
#   allow:PORT/PROTOCOL
#   deny:PORT/PROTOCOL
#   rule:RULE_TEXT
#
# Examples:
# service:ssh
# service:http
# port:8080/tcp
# allow:22/tcp

EOF

    [ ! -f "$PYTHON_CONFIG" ] && cat >"$PYTHON_CONFIG" <<'EOF'
# Python packages to install globally (pip)
# One package per line
# Use exact package names from PyPI
#
# Examples:
# requests
# numpy
# pandas
# black
# pylint

EOF

    [ ! -f "$NODE_CONFIG" ] && cat >"$NODE_CONFIG" <<'EOF'
# Node.js global packages to install (npm)
# One package per line
#
# Examples:
# typescript
# eslint
# prettier
# yarn
# pm2

EOF

    [ ! -f "$CARGO_CONFIG" ] && cat >"$CARGO_CONFIG" <<'EOF'
# Rust packages to install (cargo)
# One package per line
#
# Examples:
# ripgrep
# fd-find
# bat
# exa
# tokei

EOF

    [ ! -f "$GROUPS_CONFIG" ] && cat >"$GROUPS_CONFIG" <<'EOF'
# User groups configuration
# List groups the current user should belong to
# One group per line
#
# Examples:
# docker
# libvirt
# wheel
# audio
# video

EOF

    [ ! -f "$CONTAINERS_CONFIG" ] && cat >"$CONTAINERS_CONFIG" <<'EOF'
# Container/VM configuration
# Format: TYPE:IDENTIFIER:OPTIONS
#
# For Docker images:
#   docker-image:IMAGE_NAME
#   docker-image:IMAGE_NAME:TAG
#
# For Docker containers to run:
#   docker-run:CONTAINER_NAME:IMAGE:PORTS:VOLUMES
#
# For Podman (similar to Docker):
#   podman-image:IMAGE_NAME
#   podman-run:CONTAINER_NAME:IMAGE:PORTS:VOLUMES
#
# Examples:
# docker-image:postgres:latest
# docker-image:redis
# docker-run:postgres-dev:postgres:5432:5432:/var/lib/postgresql/data
# podman-image:nginx:alpine

EOF

    [ ! -f "$CUSTOM_COMMANDS_CONFIG" ] && cat >"$CUSTOM_COMMANDS_CONFIG" <<'EOF'
#!/usr/bin/env bash
# Custom commands to run during system restore
# These commands will be executed after system update but before package installation
# 
# Examples:
# echo "Running custom setup..."
# mkdir -p ~/.local/bin
# curl -o ~/.local/bin/some-tool https://example.com/tool
# chmod +x ~/.local/bin/some-tool

# Add your custom commands below:

EOF
    chmod +x "$CUSTOM_COMMANDS_CONFIG"

    echo "Configuration initialized at $CONFIG_DIR"
}

read_config() {
    local config_file="$1"
    [ ! -f "$config_file" ] && return
    grep -v '^#' "$config_file" | grep -v '^[[:space:]]*$' || true
}

list_installed_packages() {
    case "$PKG_MANAGER" in
    dnf)
        rpm -qa --queryformat '%{NAME}\n' 2>/dev/null | sort -u
        ;;
    apt)
        dpkg-query -W -f='${Package}\n' 2>/dev/null
        ;;
    *)
        echo "Unsupported package manager" >&2
        return 1
        ;;
    esac
}

list_installed_flatpaks() {
    flatpak list --app --columns=application 2>/dev/null || true
}

list_installed_extensions() {
    if command -v gnome-extensions &>/dev/null; then
        gnome-extensions list 2>/dev/null || true
    fi
}

list_enabled_repos() {
    if [ "$DISTRO" != "fedora" ]; then
        echo "Repository backup only supported on Fedora" >&2
        return 1
    fi

    # List Copr repos
    if [ -d /etc/yum.repos.d ]; then
        for repo_file in /etc/yum.repos.d/_copr:*.repo; do
            [ -f "$repo_file" ] || continue
            local repo_name
            repo_name=$(basename "$repo_file" .repo)
            repo_name=${repo_name#_copr:}
            repo_name=${repo_name//://}
            echo "copr:$repo_name"
        done
    fi

    # Check for RPM Fusion
    if dnf repolist enabled 2>/dev/null | grep -q "rpmfusion-free"; then
        echo "rpmfusion:free"
    fi
    if dnf repolist enabled 2>/dev/null | grep -q "rpmfusion-nonfree"; then
        echo "rpmfusion:nonfree"
    fi

    # List other third-party repos
    dnf repolist enabled 2>/dev/null | tail -n +2 | awk '{print $1}' | while read -r repo; do
        case "$repo" in
        *copr* | *rpmfusion* | fedora* | updates* | rawhide*) ;;
        *)
            echo "fedora-third-party:$repo"
            ;;
        esac
    done
}

list_enabled_services() {
    {
        # System services
        systemctl list-unit-files --type=service --state=enabled --no-pager --no-legend 2>/dev/null |
            awk '{print $1":system:enabled"}'

        # User services
        systemctl --user list-unit-files --type=service --state=enabled --no-pager --no-legend 2>/dev/null |
            awk '{print $1":user:enabled"}'
    } | sort -u
}

list_user_groups() {
    groups "$USER" 2>/dev/null | tr ' ' '\n' | tail -n +2 | sort
}

list_python_packages() {
    if command -v pip3 &>/dev/null; then
        pip3 list --user --format=freeze 2>/dev/null | cut -d'=' -f1
    elif command -v pip &>/dev/null; then
        pip list --user --format=freeze 2>/dev/null | cut -d'=' -f1
    fi
}

list_node_packages() {
    if command -v npm &>/dev/null; then
        npm list -g --depth=0 --parseable 2>/dev/null |
            tail -n +2 |
            xargs -n1 basename
    fi
}

list_cargo_packages() {
    if command -v cargo &>/dev/null; then
        cargo install --list 2>/dev/null |
            grep -v '^\s' |
            cut -d' ' -f1 |
            sort -u
    fi
}

backup_firewall() {
    echo "Backing up firewall configuration..."
    local temp_firewall
    temp_firewall=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# Firewall configuration"
        echo ""
    } >"$temp_firewall"

    if command -v firewall-cmd &>/dev/null; then
        # firewalld (Fedora)
        echo "# Detected: firewalld" >>"$temp_firewall"

        # Get default zone
        local default_zone
        default_zone=$(firewall-cmd --get-default-zone 2>/dev/null || echo "public")
        echo "zone:$default_zone" >>"$temp_firewall"

        # List services
        firewall-cmd --list-services 2>/dev/null | tr ' ' '\n' | while read -r svc; do
            [ -n "$svc" ] && echo "service:$svc" >>"$temp_firewall"
        done

        # List ports
        firewall-cmd --list-ports 2>/dev/null | tr ' ' '\n' | while read -r port; do
            [ -n "$port" ] && echo "port:$port" >>"$temp_firewall"
        done
    elif command -v ufw &>/dev/null; then
        # ufw (Ubuntu/Debian)
        echo "# Detected: ufw" >>"$temp_firewall"
        sudo ufw status numbered 2>/dev/null | grep -E '^\[' |
            sed 's/\[.*\] //' | while read -r rule; do
            echo "rule:$rule" >>"$temp_firewall"
        done
    else
        echo "# No supported firewall found" >>"$temp_firewall"
    fi

    mv "$temp_firewall" "$FIREWALL_CONFIG"
    echo "Firewall backed up to $FIREWALL_CONFIG"
}

backup_repos() {
    if [ "$DISTRO" != "fedora" ]; then
        echo "Repository backup only supported on Fedora"
        return
    fi

    echo "Backing up repository configuration..."
    local temp_repos
    temp_repos=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# Repository configuration"
        echo ""
    } >"$temp_repos"
    list_enabled_repos >>"$temp_repos" 2>/dev/null || true
    mv "$temp_repos" "$REPOS_CONFIG"
    echo "Repositories backed up to $REPOS_CONFIG"
}

install_repo() {
    local repo_line="$1"
    local repo_type="${repo_line%%:*}"
    local repo_id="${repo_line#*:}"

    case "$repo_type" in
    copr)
        echo "  Enabling Copr repo: $repo_id"
        sudo dnf copr enable -y "$repo_id" 2>/dev/null || echo "    Failed to enable $repo_id"
        ;;
    rpmfusion)
        echo "  Enabling RPM Fusion: $repo_id"
        if [ "$repo_id" = "free" ]; then
            sudo dnf install -y \
                "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" \
                2>/dev/null || echo "    Failed to enable RPM Fusion Free"
        elif [ "$repo_id" = "nonfree" ]; then
            sudo dnf install -y \
                "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm" \
                2>/dev/null || echo "    Failed to enable RPM Fusion Non-free"
        fi
        ;;
    fedora-third-party)
        echo "  Enabling third-party repo: $repo_id"
        sudo dnf config-manager --set-enabled "$repo_id" 2>/dev/null || echo "    Failed to enable $repo_id"
        ;;
    *)
        echo "  Unknown repository type: $repo_type"
        ;;
    esac
}

install_repos() {
    if [ "$DISTRO" != "fedora" ]; then
        echo "Repository installation only supported on Fedora"
        return
    fi

    local repos
    repos=$(read_config "$REPOS_CONFIG")

    if [ -z "$repos" ]; then
        echo "No repositories to install"
        return
    fi

    echo "Installing repositories..."
    while IFS= read -r repo; do
        install_repo "$repo"
    done <<<"$repos"
}

configure_services() {
    local services
    services=$(read_config "$SERVICES_CONFIG")

    if [ -z "$services" ]; then
        echo "No services to configure"
        return
    fi

    echo "Configuring services..."
    while IFS=: read -r service_name service_type service_state; do
        [ -z "$service_name" ] && continue

        case "$service_type" in
        system)
            echo "  $service_name ($service_type): $service_state"
            if [ "$service_state" = "enabled" ]; then
                sudo systemctl enable "$service_name" 2>/dev/null || echo "    Failed to enable $service_name"
                sudo systemctl start "$service_name" 2>/dev/null || echo "    Failed to start $service_name"
            elif [ "$service_state" = "disabled" ]; then
                sudo systemctl disable "$service_name" 2>/dev/null || echo "    Failed to disable $service_name"
                sudo systemctl stop "$service_name" 2>/dev/null || true
            fi
            ;;
        user)
            echo "  $service_name ($service_type): $service_state"
            if [ "$service_state" = "enabled" ]; then
                systemctl --user enable "$service_name" 2>/dev/null || echo "    Failed to enable $service_name"
                systemctl --user start "$service_name" 2>/dev/null || echo "    Failed to start $service_name"
            elif [ "$service_state" = "disabled" ]; then
                systemctl --user disable "$service_name" 2>/dev/null || echo "    Failed to disable $service_name"
                systemctl --user stop "$service_name" 2>/dev/null || true
            fi
            ;;
        esac
    done <<<"$services"
}

configure_firewall() {
    local rules
    rules=$(read_config "$FIREWALL_CONFIG")

    if [ -z "$rules" ]; then
        echo "No firewall rules to configure"
        return
    fi

    echo "Configuring firewall..."

    if command -v firewall-cmd &>/dev/null; then
        # firewalld
        while IFS=: read -r rule_type rule_value; do
            [ -z "$rule_type" ] && continue

            case "$rule_type" in
            zone)
                echo "  Setting default zone: $rule_value"
                sudo firewall-cmd --set-default-zone="$rule_value" 2>/dev/null || echo "    Failed"
                ;;
            service)
                echo "  Adding service: $rule_value"
                sudo firewall-cmd --permanent --add-service="$rule_value" 2>/dev/null || echo "    Failed"
                ;;
            port)
                echo "  Adding port: $rule_value"
                sudo firewall-cmd --permanent --add-port="$rule_value" 2>/dev/null || echo "    Failed"
                ;;
            esac
        done <<<"$rules"

        sudo firewall-cmd --reload 2>/dev/null || echo "  Failed to reload firewall"
    elif command -v ufw &>/dev/null; then
        # ufw
        sudo ufw --force enable 2>/dev/null

        while IFS=: read -r rule_type rule_value; do
            [ -z "$rule_type" ] && continue

            case "$rule_type" in
            allow)
                echo "  Allowing: $rule_value"
                sudo ufw allow "$rule_value" 2>/dev/null || echo "    Failed"
                ;;
            deny)
                echo "  Denying: $rule_value"
                sudo ufw deny "$rule_value" 2>/dev/null || echo "    Failed"
                ;;
            rule)
                echo "  Adding rule: $rule_value"
                sudo ufw "$rule_value" 2>/dev/null || echo "    Failed"
                ;;
            esac
        done <<<"$rules"
    else
        echo "No supported firewall found"
    fi
}

install_python_packages() {
    local packages
    packages=$(read_config "$PYTHON_CONFIG")

    if [ -z "$packages" ]; then
        echo "No Python packages to install"
        return
    fi

    if ! command -v pip3 &>/dev/null && ! command -v pip &>/dev/null; then
        echo "pip not found. Skipping Python packages"
        return
    fi

    echo "Installing Python packages..."
    local pip_cmd="pip3"
    command -v pip3 &>/dev/null || pip_cmd="pip"

    while IFS= read -r pkg; do
        echo "  Installing: $pkg"
        $pip_cmd install --user "$pkg" 2>/dev/null || echo "    Failed to install $pkg"
    done <<<"$packages"
}

install_node_packages() {
    local packages
    packages=$(read_config "$NODE_CONFIG")

    if [ -z "$packages" ]; then
        echo "No Node packages to install"
        return
    fi

    if ! command -v npm &>/dev/null; then
        echo "npm not found. Skipping Node packages"
        return
    fi

    echo "Installing Node packages..."
    while IFS= read -r pkg; do
        echo "  Installing: $pkg"
        npm install -g "$pkg" 2>/dev/null || echo "    Failed to install $pkg"
    done <<<"$packages"
}

install_cargo_packages() {
    local packages
    packages=$(read_config "$CARGO_CONFIG")

    if [ -z "$packages" ]; then
        echo "No Cargo packages to install"
        return
    fi

    if ! command -v cargo &>/dev/null; then
        echo "cargo not found. Skipping Cargo packages"
        return
    fi

    echo "Installing Cargo packages..."
    while IFS= read -r pkg; do
        echo "  Installing: $pkg"
        cargo install "$pkg" 2>/dev/null || echo "    Failed to install $pkg"
    done <<<"$packages"
}

configure_groups() {
    local groups
    groups=$(read_config "$GROUPS_CONFIG")

    if [ -z "$groups" ]; then
        echo "No groups to configure"
        return
    fi

    echo "Configuring user groups..."
    while IFS= read -r group; do
        [ -z "$group" ] && continue

        if getent group "$group" &>/dev/null; then
            if groups "$USER" | grep -qw "$group"; then
                echo "  Already in group: $group"
            else
                echo "  Adding to group: $group"
                sudo usermod -aG "$group" "$USER" 2>/dev/null || echo "    Failed to add to $group"
            fi
        else
            echo "  Group does not exist: $group (skipping)"
        fi
    done <<<"$groups"
}

setup_containers() {
    local containers
    containers=$(read_config "$CONTAINERS_CONFIG")

    if [ -z "$containers" ]; then
        echo "No containers to setup"
        return
    fi

    echo "Setting up containers..."
    while IFS=: read -r container_type identifier rest; do
        [ -z "$container_type" ] && continue

        case "$container_type" in
        docker-image)
            if command -v docker &>/dev/null; then
                local tag="${rest:-latest}"
                echo "  Pulling Docker image: $identifier:$tag"
                docker pull "$identifier:$tag" 2>/dev/null || echo "    Failed to pull $identifier:$tag"
            fi
            ;;
        podman-image)
            if command -v podman &>/dev/null; then
                local tag="${rest:-latest}"
                echo "  Pulling Podman image: $identifier:$tag"
                podman pull "$identifier:$tag" 2>/dev/null || echo "    Failed to pull $identifier:$tag"
            fi
            ;;
        docker-run | podman-run)
            echo "  Container run config saved: $identifier"
            echo "    (Manual setup required for running containers)"
            ;;
        esac
    done <<<"$containers"
}

run_custom_commands() {
    if [ ! -f "$CUSTOM_COMMANDS_CONFIG" ]; then
        echo "No custom commands configuration found"
        return
    fi

    if ! grep -qv '^[[:space:]]*\(#.*\)\?$' "$CUSTOM_COMMANDS_CONFIG"; then
        echo "No custom commands to execute"
        return
    fi

    echo "Executing custom commands..."
    if bash "$CUSTOM_COMMANDS_CONFIG"; then
        echo "Custom commands completed successfully"
    else
        echo "Warning: Some custom commands failed" >&2
    fi
}

system_update() {
    echo "Updating system packages..."
    case "$PKG_MANAGER" in
    dnf)
        sudo dnf upgrade -y --refresh
        ;;
    apt)
        sudo apt update
        sudo apt upgrade -y
        ;;
    *)
        echo "Unsupported package manager for updates"
        return 1
        ;;
    esac
    echo "System update complete"
}

interactive_package_select() {
    if ! command -v fzf &>/dev/null; then
        echo "fzf is not installed. Please install it first."
        return 1
    fi

    local config_file="$1"
    local list_command="$2"
    local title="$3"

    echo "Loading installed items..." >&2
    local temp_list
    temp_list=$(mktemp)
    local filtered_list
    filtered_list=$(mktemp)

    $list_command >"$temp_list" 2>&1

    local current_items
    current_items=$(read_config "$config_file")

    if [ -n "$current_items" ]; then
        local temp_current
        temp_current=$(mktemp)
        echo "$current_items" >"$temp_current"
        grep -vxFf "$temp_current" "$temp_list" >"$filtered_list" || true
        rm -f "$temp_current"
    else
        cp "$temp_list" "$filtered_list"
    fi

    local item_count
    item_count=$(wc -l <"$filtered_list")

    if [ "$item_count" -eq 0 ]; then
        echo "No new items to add (all items already in config or none found)" >&2
        rm -f "$temp_list" "$filtered_list"
        return
    fi

    echo "Found $item_count new items" >&2

    local selected
    selected=$(cat "$filtered_list" | fzf --multi --prompt="$title > " \
        --preview="echo {}" \
        --preview-window=up:1 \
        --bind='tab:toggle+down' \
        --header='TAB to select, ENTER to confirm')

    rm -f "$temp_list" "$filtered_list"

    if [ -n "$selected" ]; then
        echo "$selected" >>"$config_file"
        echo "Added $(echo "$selected" | wc -l) item(s) to configuration"
    fi
}

interactive_remove_from_config() {
    if ! command -v fzf &>/dev/null; then
        echo "fzf is not installed. Please install it first."
        return 1
    fi

    local config_file="$1"
    local title="$2"

    local current_items
    current_items=$(read_config "$config_file")

    if [ -z "$current_items" ]; then
        echo "No items in configuration"
        return
    fi

    local selected
    selected=$(echo "$current_items" | fzf --multi --prompt="$title (Remove) > " \
        --bind='tab:toggle+down' \
        --header='TAB to select, ENTER to confirm removal')

    if [ -n "$selected" ]; then
        local temp_file
        temp_file=$(mktemp)
        cp "$config_file" "$temp_file"

        while IFS= read -r item; do
            sed -i "\|^${item}$|d" "$temp_file"
        done <<<"$selected"

        mv "$temp_file" "$config_file"
        echo "Removed $(echo "$selected" | wc -l) item(s) from configuration"
    fi
}

edit_custom_commands() {
    local editor="${EDITOR:-nano}"

    if [ ! -f "$CUSTOM_COMMANDS_CONFIG" ]; then
        init_config
    fi

    echo "Opening custom commands in $editor..."
    $editor "$CUSTOM_COMMANDS_CONFIG"
}

edit_config_file() {
    local config_file="$1"
    local editor="${EDITOR:-nano}"

    if [ ! -f "$config_file" ]; then
        init_config
    fi

    echo "Opening $(basename "$config_file") in $editor..."
    $editor "$config_file"
}

install_packages() {
    local packages
    packages=$(read_config "$PACKAGES_CONFIG")

    if [ -z "$packages" ]; then
        echo "No packages to install"
        return
    fi

    echo "Installing system packages..."
    case "$PKG_MANAGER" in
    dnf)
        # shellcheck disable=SC2086
        sudo dnf install -y $packages
        ;;
    apt)
        # shellcheck disable=SC2086
        sudo apt install -y $packages
        ;;
    *)
        echo "Unsupported package manager"
        return 1
        ;;
    esac
}

install_flatpaks() {
    local flatpaks
    flatpaks=$(read_config "$FLATPAKS_CONFIG")

    if [ -z "$flatpaks" ]; then
        echo "No flatpaks to install"
        return
    fi

    echo "Installing flatpaks..."
    while IFS= read -r app; do
        flatpak install -y flathub "$app" 2>/dev/null || echo "Failed to install $app"
    done <<<"$flatpaks"
}

install_extensions() {
    local extensions
    extensions=$(read_config "$EXTENSIONS_CONFIG")

    if [ -z "$extensions" ]; then
        echo "No extensions to install"
        return
    fi

    if ! command -v gnome-extensions &>/dev/null; then
        echo "GNOME extensions manager not found"
        return 1
    fi

    echo "Installing GNOME extensions..."
    echo "Note: Manual installation via extensions.gnome.org may be required"
    while IFS= read -r ext; do
        echo "  - $ext"
    done <<<"$extensions"
}

backup_dconf() {
    echo "Backing up dconf settings..."
    dconf dump / >"$DCONF_BACKUP"
    echo "dconf settings backed up to $DCONF_BACKUP"
}

restore_dconf() {
    if [ ! -f "$DCONF_BACKUP" ]; then
        echo "No dconf backup found at $DCONF_BACKUP"
        return 1
    fi

    echo "Restoring dconf settings..."
    dconf load / <"$DCONF_BACKUP"
    echo "dconf settings restored"
}

sync_config() {
    echo "Synchronizing current system state to configuration..."

    echo "Updating packages configuration..."
    local temp_packages
    temp_packages=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# System packages"
        echo ""
    } >"$temp_packages"
    list_installed_packages >>"$temp_packages"
    mv "$temp_packages" "$PACKAGES_CONFIG"

    echo "Updating flatpaks configuration..."
    local temp_flatpaks
    temp_flatpaks=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# Flatpak applications"
        echo ""
    } >"$temp_flatpaks"
    list_installed_flatpaks >>"$temp_flatpaks"
    if [ -s "$temp_flatpaks" ]; then
        mv "$temp_flatpaks" "$FLATPAKS_CONFIG"
    else
        rm -f "$temp_flatpaks"
    fi

    echo "Updating extensions configuration..."
    local temp_extensions
    temp_extensions=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# GNOME extensions"
        echo ""
    } >"$temp_extensions"
    list_installed_extensions >>"$temp_extensions"
    if [ -s "$temp_extensions" ]; then
        mv "$temp_extensions" "$EXTENSIONS_CONFIG"
    else
        rm -f "$temp_extensions"
    fi

    if [ "$DISTRO" = "fedora" ]; then
        backup_repos
    fi

    echo "Updating services configuration..."
    local temp_services
    temp_services=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# Systemd services"
        echo ""
    } >"$temp_services"
    list_enabled_services >>"$temp_services"
    if [ -s "$temp_services" ]; then
        mv "$temp_services" "$SERVICES_CONFIG"
    else
        rm -f "$temp_services"
    fi

    backup_firewall

    echo "Updating Python packages configuration..."
    local temp_python
    temp_python=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# Python packages"
        echo ""
    } >"$temp_python"
    list_python_packages >>"$temp_python"
    if [ -s "$temp_python" ]; then
        mv "$temp_python" "$PYTHON_CONFIG"
    else
        rm -f "$temp_python"
    fi

    echo "Updating Node packages configuration..."
    local temp_node
    temp_node=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# Node packages"
        echo ""
    } >"$temp_node"
    list_node_packages >>"$temp_node"
    if [ -s "$temp_node" ]; then
        mv "$temp_node" "$NODE_CONFIG"
    else
        rm -f "$temp_node"
    fi

    echo "Updating Cargo packages configuration..."
    local temp_cargo
    temp_cargo=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# Cargo packages"
        echo ""
    } >"$temp_cargo"
    list_cargo_packages >>"$temp_cargo"
    if [ -s "$temp_cargo" ]; then
        mv "$temp_cargo" "$CARGO_CONFIG"
    else
        rm -f "$temp_cargo"
    fi

    echo "Updating groups configuration..."
    local temp_groups
    temp_groups=$(mktemp)
    {
        echo "# Generated on $(date)"
        echo "# User groups"
        echo ""
    } >"$temp_groups"
    list_user_groups >>"$temp_groups"
    if [ -s "$temp_groups" ]; then
        mv "$temp_groups" "$GROUPS_CONFIG"
    else
        rm -f "$temp_groups"
    fi

    backup_dconf

    echo "Configuration synchronized"
}

restore_system() {
    echo "========================================="
    echo "Starting Full System Restoration"
    echo "========================================="
    echo ""

    # Step 1: System Update
    echo "[1/12] System Update & Upgrade"
    echo "---------------------------------"
    system_update
    echo ""

    # Step 2: Custom Commands
    echo "[2/12] Custom Commands"
    echo "---------------------------------"
    run_custom_commands
    echo ""

    # Step 3: Repositories (Fedora only)
    if [ "$DISTRO" = "fedora" ]; then
        echo "[3/12] Adding Repositories"
        echo "---------------------------------"
        install_repos
        echo ""
    else
        echo "[3/12] Repositories (Skipped - Not Fedora)"
        echo "---------------------------------"
        echo ""
    fi

    # Step 4: System Packages
    echo "[4/12] Installing System Packages"
    echo "---------------------------------"
    install_packages
    echo ""

    # Step 5: Flatpaks
    echo "[5/12] Installing Flatpaks"
    echo "---------------------------------"
    install_flatpaks
    echo ""

    # Step 6: Python Packages
    echo "[6/12] Installing Python Packages"
    echo "---------------------------------"
    install_python_packages
    echo ""

    # Step 7: Node Packages
    echo "[7/12] Installing Node Packages"
    echo "---------------------------------"
    install_node_packages
    echo ""

    # Step 8: Cargo Packages
    echo "[8/12] Installing Cargo Packages"
    echo "---------------------------------"
    install_cargo_packages
    echo ""

    # Step 9: GNOME Extensions (if GNOME desktop)
    if [[ "$DESKTOP" == *"gnome"* ]]; then
        echo "[9/12] Installing GNOME Extensions"
        echo "---------------------------------"
        install_extensions
        echo ""
    else
        echo "[9/12] GNOME Extensions (Skipped - Not GNOME Desktop)"
        echo "---------------------------------"
        echo ""
    fi

    # Step 10: Services Configuration
    echo "[10/12] Configuring Services"
    echo "---------------------------------"
    configure_services
    echo ""

    # Step 11: Firewall Configuration
    echo "[11/12] Configuring Firewall"
    echo "---------------------------------"
    configure_firewall
    echo ""

    # Step 12: User Groups
    echo "[12/12] Configuring User Groups"
    echo "---------------------------------"
    configure_groups
    echo ""

    # Step 13: Container Setup
    echo "[13/12] Setting up Containers"
    echo "---------------------------------"
    setup_containers
    echo ""

    # Step 14: dconf Settings
    echo "[14/12] Restoring dconf Settings"
    echo "---------------------------------"
    restore_dconf
    echo ""

    echo "========================================="
    echo "System Restoration Complete!"
    echo "========================================="
    echo ""
    echo "IMPORTANT: You may need to:"
    echo "  - Log out and log back in for group changes to take effect"
    echo "  - Manually install GNOME extensions from extensions.gnome.org"
    echo "  - Reboot the system if kernel or driver updates were installed"
    echo "  - Start Docker/Podman services: sudo systemctl start docker"
    echo "  - Configure running containers manually (check containers.conf)"
}

show_status() {
    echo "System Configuration Status"
    echo "============================"
    echo "Config directory: $CONFIG_DIR"
    echo "Distribution: $DISTRO"
    echo "Package manager: $PKG_MANAGER"
    echo "Desktop environment: $DESKTOP"
    echo ""

    echo "Configuration Files:"
    echo "  Packages: $(read_config "$PACKAGES_CONFIG" | wc -l)"
    echo "  Flatpaks: $(read_config "$FLATPAKS_CONFIG" | wc -l)"
    echo "  Extensions: $(read_config "$EXTENSIONS_CONFIG" | wc -l)"
    if [ "$DISTRO" = "fedora" ]; then
        echo "  Repositories: $(read_config "$REPOS_CONFIG" | wc -l)"
    fi
    echo "  Services: $(read_config "$SERVICES_CONFIG" | wc -l)"
    echo "  Firewall rules: $(read_config "$FIREWALL_CONFIG" | wc -l)"
    echo "  Python packages: $(read_config "$PYTHON_CONFIG" | wc -l)"
    echo "  Node packages: $(read_config "$NODE_CONFIG" | wc -l)"
    echo "  Cargo packages: $(read_config "$CARGO_CONFIG" | wc -l)"
    echo "  User groups: $(read_config "$GROUPS_CONFIG" | wc -l)"
    echo "  Containers: $(read_config "$CONTAINERS_CONFIG" | wc -l)"
    echo ""
    echo "Backups:"
    echo "  Custom commands: $([ -f "$CUSTOM_COMMANDS_CONFIG" ] && echo "Yes" || echo "No")"
    echo "  dconf backup: $([ -f "$DCONF_BACKUP" ] && echo "Yes" || echo "No")"
}

interactive_menu() {
    if ! command -v fzf &>/dev/null; then
        echo "fzf is not installed. Please install it first."
        return 1
    fi

    local menu_items
    menu_items=$(
        cat <<'EOF'
Initialize configuration
Add packages to config
Add flatpaks to config
Add GNOME extensions to config
Add repositories to config (Fedora)
Add services to config
Add Python packages to config
Add Node packages to config
Add Cargo packages to config
Add user groups to config
Edit custom commands
Edit services config
Edit firewall config
Edit containers config
Remove packages from config
Remove flatpaks from config
Remove extensions from config
Remove repositories from config (Fedora)
Remove services from config
Remove Python packages from config
Remove Node packages from config
Remove Cargo packages from config
Remove user groups from config
Sync current system to config
Backup dconf settings
Backup firewall rules
System update & upgrade
Restore entire system (Full)
Install packages
Install flatpaks
Install extensions
Install repositories (Fedora)
Install Python packages
Install Node packages
Install Cargo packages
Configure services
Configure firewall
Configure user groups
Setup containers
Run custom commands
Restore dconf settings
Show status
Exit
EOF
    )

    # Filter menu based on distro
    if [ "$DISTRO" != "fedora" ]; then
        menu_items=$(echo "$menu_items" | grep -v "(Fedora)")
    fi

    local choice
    choice=$(echo "$menu_items" | fzf --prompt="Select action > " --height=40% --reverse)

    case "$choice" in
    "Initialize configuration")
        init_config
        ;;
    "Add packages to config")
        interactive_package_select "$PACKAGES_CONFIG" list_installed_packages "Select packages to add"
        ;;
    "Add flatpaks to config")
        interactive_package_select "$FLATPAKS_CONFIG" list_installed_flatpaks "Select flatpaks to add"
        ;;
    "Add GNOME extensions to config")
        interactive_package_select "$EXTENSIONS_CONFIG" list_installed_extensions "Select extensions to add"
        ;;
    "Add repositories to config (Fedora)")
        interactive_package_select "$REPOS_CONFIG" list_enabled_repos "Select repositories to add"
        ;;
    "Add services to config")
        interactive_package_select "$SERVICES_CONFIG" list_enabled_services "Select services to add"
        ;;
    "Add Python packages to config")
        interactive_package_select "$PYTHON_CONFIG" list_python_packages "Select Python packages to add"
        ;;
    "Add Node packages to config")
        interactive_package_select "$NODE_CONFIG" list_node_packages "Select Node packages to add"
        ;;
    "Add Cargo packages to config")
        interactive_package_select "$CARGO_CONFIG" list_cargo_packages "Select Cargo packages to add"
        ;;
    "Add user groups to config")
        interactive_package_select "$GROUPS_CONFIG" list_user_groups "Select groups to add"
        ;;
    "Edit custom commands")
        edit_custom_commands
        ;;
    "Edit services config")
        edit_config_file "$SERVICES_CONFIG"
        ;;
    "Edit firewall config")
        edit_config_file "$FIREWALL_CONFIG"
        ;;
    "Edit containers config")
        edit_config_file "$CONTAINERS_CONFIG"
        ;;
    "Remove packages from config")
        interactive_remove_from_config "$PACKAGES_CONFIG" "Remove packages"
        ;;
    "Remove flatpaks from config")
        interactive_remove_from_config "$FLATPAKS_CONFIG" "Remove flatpaks"
        ;;
    "Remove extensions from config")
        interactive_remove_from_config "$EXTENSIONS_CONFIG" "Remove extensions"
        ;;
    "Remove repositories from config (Fedora)")
        interactive_remove_from_config "$REPOS_CONFIG" "Remove repositories"
        ;;
    "Remove services from config")
        interactive_remove_from_config "$SERVICES_CONFIG" "Remove services"
        ;;
    "Remove Python packages from config")
        interactive_remove_from_config "$PYTHON_CONFIG" "Remove Python packages"
        ;;
    "Remove Node packages from config")
        interactive_remove_from_config "$NODE_CONFIG" "Remove Node packages"
        ;;
    "Remove Cargo packages from config")
        interactive_remove_from_config "$CARGO_CONFIG" "Remove Cargo packages"
        ;;
    "Remove user groups from config")
        interactive_remove_from_config "$GROUPS_CONFIG" "Remove groups"
        ;;
    "Sync current system to config")
        sync_config
        ;;
    "Backup dconf settings")
        backup_dconf
        ;;
    "Backup firewall rules")
        backup_firewall
        ;;
    "System update & upgrade")
        system_update
        ;;
    "Restore entire system (Full)")
        restore_system
        ;;
    "Install packages")
        install_packages
        ;;
    "Install flatpaks")
        install_flatpaks
        ;;
    "Install extensions")
        install_extensions
        ;;
    "Install repositories (Fedora)")
        install_repos
        ;;
    "Install Python packages")
        install_python_packages
        ;;
    "Install Node packages")
        install_node_packages
        ;;
    "Install Cargo packages")
        install_cargo_packages
        ;;
    "Configure services")
        configure_services
        ;;
    "Configure firewall")
        configure_firewall
        ;;
    "Configure user groups")
        configure_groups
        ;;
    "Setup containers")
        setup_containers
        ;;
    "Run custom commands")
        run_custom_commands
        ;;
    "Restore dconf settings")
        restore_dconf
        ;;
    "Show status")
        show_status
        ;;
    "Exit" | "")
        exit 0
        ;;
    esac
}

show_version() {
    cat <<EOF
sysconfig-manager v${VERSION}
EOF
}

show_help() {
    show_version
    cat <<EOF
Manage system configuration declaratively

USAGE:
    sysconfig-manager [COMMAND]

COMMANDS:
    init        Initialize configuration directory
    restore     Restore entire system from config (full restoration)
    version     Show version information
    help        Show this help message
    (no args)   Show interactive fzf menu (recommended)

INTERACTIVE MENU:
    The main way to use this tool is through the interactive fzf menu.
    Simply run: sysconfig-manager

    The menu provides all functionality organized into categories:
      - Initialize and sync configuration
      - Add items to config (packages, services, etc.)
      - Remove items from config
      - Backup and restore operations
      - Edit configuration files
      - Install and configure individual components

RESTORE ORDER (Full System Restore):
    1.  System update & upgrade
    2.  Execute custom commands
    3.  Add Copr/third-party repositories (Fedora)
    4.  Install system packages
    5.  Install flatpaks
    6.  Install Python packages
    7.  Install Node packages
    8.  Install Cargo packages
    9.  Install GNOME extensions (if GNOME desktop)
    10. Configure systemd services
    11. Configure firewall rules
    12. Configure user groups
    13. Setup containers
    14. Restore dconf settings

CONFIGURATION FILES:
    Config directory: $CONFIG_DIR

    Core:
      packages.conf         System packages (dnf/apt)
      flatpaks.conf         Flatpak applications
      gnome-extensions.conf GNOME extensions
      repos.conf            Repositories (Fedora)
      custom-commands.sh    Custom setup script
      dconf-settings.ini    Desktop settings backup

    Services & Security:
      services.conf         Systemd services
      firewall.conf         Firewall rules
      groups.conf           User groups

    Development:
      python-packages.conf  Python packages (pip)
      node-packages.conf    Node packages (npm)
      cargo-packages.conf   Rust packages (cargo)
      containers.conf       Docker/Podman setup

TYPICAL WORKFLOW:
    # First time setup on current system
    sysconfig-manager init
    sysconfig-manager              # Use interactive menu to sync

    # On a fresh system (restore everything)
    sysconfig-manager restore

    # Daily usage (interactive menu)
    sysconfig-manager

CONFIGURATION FORMATS:

    services.conf:
      docker.service:system:enabled
      sshd.service:system:enabled
      bluetooth.service:system:disabled

    firewall.conf (firewalld):
      service:ssh
      service:http
      port:8080/tcp

    firewall.conf (ufw):
      allow:22/tcp
      allow:80/tcp

    containers.conf:
      docker-image:postgres:latest
      docker-image:redis
      podman-image:nginx:alpine

EOF
}

main() {
    if [ "${1:-}" = "--help" ] || [ "${1:-}" = "-h" ]; then
        show_help
        exit 0
    fi

    case "${1:-menu}" in
    init)
        init_config
        ;;
    restore)
        restore_system
        ;;
    help | "-help" | "--help" | "-h")
        show_help
        ;;
    version | "--version")
        show_version
        ;;
    menu | "")
        interactive_menu
        ;;
    *)
        echo "Unknown command: $1"
        echo ""
        echo "Available commands:"
        echo "  sysconfig-manager          - Interactive menu (default)"
        echo "  sysconfig-manager init     - Initialize configuration"
        echo "  sysconfig-manager restore  - Full system restore"
        echo "  sysconfig-manager version  - Show version"
        echo "  sysconfig-manager help     - Show help"
        exit 1
        ;;
    esac
}

main "$@"
